import { NextResponse } from 'next/server';
import chromium from '@sparticuz/chromium';
import puppeteer from 'puppeteer-core';

export async function POST(request: Request) {
  try {
    const { title, content, wordCount, rating, images } = await request.json();

    if (!title || !content) {
      return NextResponse.json(
        { error: 'Title and content are required' },
        { status: 400 }
      );
    }

    // Launch browser (serverless-compatible)
    const browser = await puppeteer.launch({
      args: chromium.args,
      executablePath: await chromium.executablePath(),
      headless: true,
    });

    const page = await browser.newPage();

    // Create HTML content for PDF with images
    const htmlContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="UTF-8">
          <title>${title}</title>
          <style>
            body {
              font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
              line-height: 1.6;
              color: #333;
              max-width: 800px;
              margin: 0 auto;
              padding: 40px 20px;
            }
            h1 {
              color: #1a202c;
              font-size: 2.5em;
              margin-bottom: 20px;
              border-bottom: 3px solid #e2e8f0;
              padding-bottom: 10px;
            }
            h2 {
              color: #2d3748;
              font-size: 1.8em;
              margin-top: 30px;
              margin-bottom: 15px;
            }
            p {
              margin-bottom: 15px;
              text-align: justify;
            }
            ul, ol {
              margin-bottom: 15px;
              padding-left: 20px;
            }
            li {
              margin-bottom: 5px;
            }
            strong {
              color: #2d3748;
            }
            .metadata {
              background: #f7fafc;
              padding: 20px;
              border-radius: 8px;
              margin-bottom: 30px;
              border-left: 4px solid #4299e1;
            }
            .metadata h3 {
              margin: 0 0 10px 0;
              color: #2d3748;
            }
            .metadata p {
              margin: 5px 0;
              color: #4a5568;
            }
            .rating {
              display: inline-block;
              background: #48bb78;
              color: white;
              padding: 4px 12px;
              border-radius: 20px;
              font-weight: bold;
            }
            .content {
              margin-top: 30px;
            }
            .images-section {
              margin: 30px 0;
              page-break-inside: avoid;
            }
            .images-section h3 {
              color: #2d3748;
              font-size: 1.5em;
              margin-bottom: 15px;
            }
            .images-grid {
              display: grid;
              grid-template-columns: repeat(2, 1fr);
              gap: 15px;
              margin-bottom: 20px;
            }
            .image-item {
              text-align: center;
              page-break-inside: avoid;
            }
            .image-item img {
              max-width: 100%;
              height: auto;
              border-radius: 8px;
              box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            }
            .image-caption {
              margin-top: 8px;
              font-size: 0.9em;
              color: #666;
              font-style: italic;
            }
            .footer {
              margin-top: 40px;
              padding-top: 20px;
              border-top: 1px solid #e2e8f0;
              text-align: center;
              color: #718096;
              font-size: 0.9em;
            }
            @media print {
              .images-section {
                page-break-inside: avoid;
              }
              .image-item {
                page-break-inside: avoid;
              }
            }
          </style>
        </head>
        <body>
          <h1>${title}</h1>
          
          <div class="metadata">
            <h3>Blog Information</h3>
            <p><strong>Word Count:</strong> ${wordCount || 'N/A'}</p>
            ${rating ? `<p><strong>AI Quality Rating:</strong> <span class="rating">${rating.score}/10</span></p>` : ''}
            ${rating ? `<p><strong>AI Review:</strong> ${rating.review}</p>` : ''}
            <p><strong>Generated by:</strong> Dev & Debate AI Blog Generator</p>
            <p><strong>Date:</strong> ${new Date().toLocaleDateString()}</p>
          </div>
          
          ${images && images.length > 0 ? `
          <div class="images-section">
            <h3>Suggested Images</h3>
            <div class="images-grid">
              ${images.map((imageUrl: string, index: number) => `
              <div class="image-item">
                <img src="${imageUrl}" alt="Blog image ${index + 1}">
                <div class="image-caption">Image ${index + 1}</div>
              </div>
              `).join('')}
            </div>
            <p style="text-align: center; color: #666; font-size: 0.9em; margin-top: 15px;">
              Images sourced from Pexels - Free to use
            </p>
          </div>
          ` : ''}
          
          <div class="content">
            ${content}
          </div>
          
          <div class="footer">
            <p>Generated with Dev & Debate AI Blog Generator â€¢ ${new Date().toLocaleDateString()}</p>
          </div>
        </body>
      </html>
    `;

    // Set content and generate PDF
    await page.setContent(htmlContent, { waitUntil: 'networkidle0' });

    const pdf = await page.pdf({
      format: 'A4',
      margin: {
        top: '20mm',
        right: '20mm',
        bottom: '20mm',
        left: '20mm'
      },
      printBackground: true,
      displayHeaderFooter: false
    });

    await browser.close();

    // Return PDF as response
    return new NextResponse(pdf, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="${title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.pdf"`,
      },
    });

  } catch (error) {
    console.error('PDF generation error:', error);
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
    return NextResponse.json(
      { error: 'Failed to generate PDF', details: errorMessage },
      { status: 500 }
    );
  }
} 